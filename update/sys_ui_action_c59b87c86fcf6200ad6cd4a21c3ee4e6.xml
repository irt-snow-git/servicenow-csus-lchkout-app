<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>Confirm</action_name>
        <active>true</active>
        <client>false</client>
        <comments>Moves the Checkout Ticket from the "Confriming" state to the "Checked Out" state if certain conditions are met. &#13;
Checks two conditions: &#13;
 1) if the Device is in the "Available" state &#13;
 2) if the customer has mutiple devices of the same type checked out (overidden by Manager roles)</comments>
        <condition>current.state=='Confirming'</condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <hint/>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <name>Confirm</name>
        <onclick>runclientcode()</onclick>
        <order>100</order>
        <script><![CDATA[var hasMultipleDevices = false;

if(current.device_name.device_type.abstract_type.checkout_limit != 0){
	hasMultipleDevices = checkForMultipleDevices(
		current.student_name, current.device_name.device_type.abstract_type, current.device_name.device_type.abstract_type.checkout_limit);
}

var accessUtils = new AccessUtils();

var isManager = accessUtils.isManager();

if (hasMultipleDevices) {
	if (isManager) {
		gs.addErrorMessage("Student has reached the checkout limit for this device type.");
		checkoutDevice();
	} else {
		gs.addErrorMessage("Checkout Denied: Student has reached the checkout limit for this device type.");
		action.setRedirectURL(current);
	}
} else { //No checkout conflicts, proceed to checkout the item
	checkoutDevice();
}


function checkoutDevice() {
    if (current.device_name.state == 3) {
        //Find Device from Ticket and change availability
        var device = new GlideRecord('x_casus_laptop_devices_table');
        device.get(current.device_name);
        device.state = 2;
        device.update();

        //Change ticket state and remind operator of Return Time
        current.state = 'Checked Out';
        if(current.update() == null){
			gs.error("Laptop Checkout: Confirm: Update failed on sys_id: " + current.sys_id);
		}
		var time = new CheckoutFormUtils().convertDateTo12HourFormat(current.return_time.getDisplayValue());
        gs.addInfoMessage(current.device_name.device_id + " Return Time: " + time);
    } else {
        gs.addErrorMessage("Device is currently unavailable.");
        action.setRedirectURL(current);
    }

}
/*_________________________________________________________________
   * Description: Checks if the customer has multiple devices of the same type
   * Parameters: user id of customer, sys id of abstract type of device, maximum number of checkouts
   * Returns: (Integer) True - Yes, they have reached the device check out limit
   ________________________________________________________________*/
function checkForMultipleDevices(student_sysid, abstype_sysid, checkout_limit) {
	var ticketCount = new GlideAggregate('x_casus_laptop_checkout_table');
	ticketCount.addEncodedQuery("active=true^state=Checked Out^student_name="+student_sysid+"^device_name.device_type.abstract_type="+abstype_sysid);
	ticketCount.addAggregate('COUNT');
	ticketCount.query();
	ticketCount.next();
	
	return parseInt(ticketCount.getAggregate('COUNT')) >= parseInt(checkout_limit);
}
]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>msn73</sys_created_by>
        <sys_created_on>2016-11-08 03:49:48</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>c59b87c86fcf6200ad6cd4a21c3ee4e6</sys_id>
        <sys_mod_count>95</sys_mod_count>
        <sys_name>Confirm</sys_name>
        <sys_overrides/>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_ui_action_c59b87c86fcf6200ad6cd4a21c3ee4e6</sys_update_name>
        <sys_updated_by>hedge</sys_updated_by>
        <sys_updated_on>2018-03-14 21:45:27</sys_updated_on>
        <table>x_casus_laptop_checkout_table</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>true</ui16_compatible>
    </sys_ui_action>
</record_update>
