<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_casus_laptop.CheckoutFormUtils</api_name>
        <client_callable>true</client_callable>
        <description>Functions used in the Laptop Checkoput Table Form. Used to verify that all form information is valid before submission.</description>
        <name>CheckoutFormUtils</name>
        <script><![CDATA[var CheckoutFormUtils = Class.create();
CheckoutFormUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	//Verifies that the device is available, creates a default return time, and returns the device's associated depot
	getDeviceFormInfo: function(){
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var availTag = this.newItem("availTag");
		if(device.state == 3){
			availTag.setAttribute("available", "true");
		}else{
			availTag.setAttribute("available", "false");
			return;
		}
		
		var depotTag = this.newItem("depotTag");
		depotTag.setAttribute("depot", device.device_type.depot);
		
		var checkoutTime = new GlideDateTime(this.getParameter('sysparm_chkTime'));
		var returnTime = new GlideDateTime(checkoutTime);
		
		var defaultTime = new GlideDateTime(device.device_type.default_time);
		returnTime.add(defaultTime.getNumericValue());
		
		var returnTag = this.newItem("returnTag");
		
		returnTag.setAttribute("returnTime", 
							   this._isInSchedule(
			device.device_type.depot.schedule, checkoutTime, returnTime, false));
	},
	
	//Private scheduling function that trims the return time if it is outside the specified schedule
	_isInSchedule: function(schedID, checkoutTime, returnTime, isManager){
		var sCheckoutTime = new GlideDateTime(checkoutTime);
		var sReturnTime = new GlideDateTime(returnTime);
		
		sCheckoutTime.add(-checkoutTime.getTZOffset());
		sReturnTime.add(-returnTime.getTZOffset());
		
		var sched = new GlideSchedule(schedID);
		if(sched.isValid()){
			if(sched.isInSchedule(sCheckoutTime)){
				if(sched.isInSchedule(sReturnTime)){
					return returnTime;
				}else{
					if(isManager){
						gs.addErrorMessage("Warning: Return Time is outside operation hours.");
						return returnTime;
					}else{
						gs.addInfoMessage("Return Time was outside operation hours and was trimmed " + 
										  "to the nearest valid time.");
						var duration = sched.duration(sCheckoutTime, sReturnTime);
						var trimmedReturn = sched.add(sCheckoutTime, duration);
						trimmedReturn.add(returnTime.getTZOffset());
						return trimmedReturn;
					}
				}
			}else{
				gs.addErrorMessage("Checkouts are unavailable at this time.");
				if(isManager){
					return returnTime;
				}else{
					return '';
				}
			}
		}
	},
	
	//Verifies the default renewed return time is in the schedule associated with the depot. Server side of Renew UI Action
	renewWithSchedule: function(schedule, now, newReturnTime, isAdmin){
		now.add(now.getTZOffset());
		newReturnTime.add(newReturnTime.getTZOffset());
		var trimmedReturn = this._isInSchedule(schedule, now, newReturnTime, isAdmin);
		trimmedReturn.add(-trimmedReturn.getTZOffset());
		return trimmedReturn;
	},
	
	//Verifies the given return time is in the schedule associated with the depot. Server side of Return Time Check client script
	checkWithSchedule: function(){
		var checkoutTime = new GlideDateTime(this.getParameter('sysparm_checkoutTime'));
		var returnTime = new GlideDateTime(this.getParameter('sysparm_returnTime'));
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var accessUtils = new AccessUtils();
		var isManager = accessUtils.isManager();
		
		var duration = new GlideDateTime(GlideDateTime.subtract(checkoutTime, returnTime));
		var maxTime = new GlideDateTime(device.device_type.max_time);
		maxTime.add(60000);
		var isMaxOrLess = duration.getNumericValue() < maxTime.getNumericValue();
		
		var inSchedTag = this.newItem("inSchedTag");
		
		if(isManager || isMaxOrLess){
			inSchedTag.setAttribute("inSched", 
									this._isInSchedule(device.device_type.depot.schedule, 
													   checkoutTime, returnTime, isManager));
		}else{
			gs.addErrorMessage("Return Time cannot be longer than the maximum duration.");
			inSchedTag.setAttribute("inSched", '');
		}
	},
	
	//Verifies the Customer's student and hold status as well as the Technician's manager status
	checkStudent: function(){
		var student = new GlideRecord('sys_user');
		student.get(this.getParameter('sysparm_student'));
		
		//Customer's student status
		var studentTag = this.newItem("studentTag");
		studentTag.setAttribute("isStudent", student.u_student);
		
		//Customer's faculty status
		var facultyTag = this.newItem("facultyTag");
		facultyTag.setAttribute("isFaculty", student.u_faculty);
		
		//Customer's staff status
		var staffTag = this.newItem("staffTag");
		staffTag.setAttribute("isStaff", student.u_staff);
		
		//Technician's manager status
		var accessUtils = new AccessUtils();
		var managerTag = this.newItem("managerTag");
		managerTag.setAttribute("isManager", accessUtils.isManager());
		
		//Customer's hold status
		var holds = new GlideRecord('x_casus_laptop_hold');
		holds.addEncodedQuery('state=1^checkout_ticket.student_name.sys_id='+student.sys_id);
		holds.query();
		
		var holdTag = this.newItem("holdTag");
		holdTag.setAttribute("hasHold", holds.hasNext());
	},
	
	//Returns curernt time
	getNowDateTime: function(){
		var nowTag = this.newItem("nowTag");
		nowTag.setAttribute("now", (new GlideDateTime()));
	},
	
	//Returns the result from the compareTo function to the Max Time Check client script
	compareDateTimes: function(){
		var defaultTime = new GlideDateTime(this.getParameter('sysparm_defTime'));
		var maxTime = new GlideDateTime(this.getParameter('sysparm_maxTime'));
		var compareTag = this.newItem("compareTag");
		compareTag.setAttribute("compareValue", defaultTime.compareTo(maxTime));
	},
	
	type: 'CheckoutFormUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>hedge</sys_created_by>
        <sys_created_on>2017-03-22 21:08:10</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>59b670236fa9b600ad6cd4a21c3ee4d1</sys_id>
        <sys_mod_count>220</sys_mod_count>
        <sys_name>CheckoutFormUtils</sys_name>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_script_include_59b670236fa9b600ad6cd4a21c3ee4d1</sys_update_name>
        <sys_updated_by>hedge</sys_updated_by>
        <sys_updated_on>2018-01-10 17:27:01</sys_updated_on>
    </sys_script_include>
</record_update>
