<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_casus_laptop.CheckoutFormUtils</api_name>
        <client_callable>true</client_callable>
        <description>Functions used in the Laptop Checkoput Table Form. Used to verify that all form information is valid before submission.</description>
        <name>CheckoutFormUtils</name>
        <script><![CDATA[var CheckoutFormUtils = Class.create();
CheckoutFormUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	//Verifies that the device is available, creates a default return time, and returns the device's associated depot
	getDeviceFormInfo: function(){
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var availTag = this.newItem("availTag");
		if(device.state.toString() === '3'){
			availTag.setAttribute("available", "true");
		}else{
			availTag.setAttribute("available", "false");
			return;
		}
		
		var depotTag = this.newItem("depotTag");
		depotTag.setAttribute("depot", device.device_type.depot);
		
		var checkoutString = this.getParameter('sysparm_chkTime');
		var checkoutTime = this.convertClientDateTimeToServerFormat(checkoutString);
		
		var returnTime = new GlideDateTime(checkoutTime);
		
		var defaultTime = new GlideDateTime(device.device_type.default_time);
		returnTime.add(defaultTime.getNumericValue());
		
		var returnTag = this.newItem("returnTag");
		
		checkoutTime.add(-checkoutTime.getTZOffset());
		returnTime.add(-returnTime.getTZOffset());
		
		var newReturn = this._isInSchedule(device.device_type.depot.schedule, checkoutTime, returnTime, false).getDisplayValue();
		
		returnTag.setAttribute("returnTime", newReturn);
	},
	
	//Private scheduling function that trims the return time if it is outside the specified schedule
	_isInSchedule: function(schedID, checkoutTime, returnTime, isManager){		
		var sched = new GlideSchedule(schedID);
		if(sched.isValid()){
			if(sched.isInSchedule(checkoutTime)){
				if(sched.isInSchedule(returnTime)){
					return returnTime;
				}else{
					if(isManager){
						gs.addErrorMessage("Warning: Return Time is outside operation hours.");
						return returnTime;
					}else{
						gs.addInfoMessage("Return Time was outside operation hours and was trimmed " + 
										  "to the nearest valid time.");
						var duration = sched.duration(checkoutTime, returnTime);
						var trimmedReturn = sched.add(checkoutTime, duration);

						return trimmedReturn;
					}
				}
			}else{
				gs.addErrorMessage("Checkouts are unavailable at this time.");
				if(isManager){
					return returnTime;
				}else{
					return '';
				}
			}
		}
	},
	
	//Verifies the default renewed return time is in the schedule associated with the depot. Server side of Renew UI Action
	renewWithSchedule: function(schedule, now, newReturnTime, isAdmin){
		var trimmedReturn = this._isInSchedule(schedule, now, newReturnTime, isAdmin);
		
		return trimmedReturn;
	},
	
	//Verifies the given return time is in the schedule associated with the depot. Server side of Return Time Check client script
	checkWithSchedule: function(){
		var checkoutString = this.getParameter('sysparm_checkoutTime');
		var checkoutTime = this.convertClientDateTimeToServerFormat(checkoutString);
		
		var returnString = this.getParameter('sysparm_returnTime');
		var returnTime = this.convertClientDateTimeToServerFormat(returnString);
		
		var inSchedTag = this.newItem("inSchedTag");
		
		if(checkoutTime.compareTo(returnTime) === 1){
			gs.addErrorMessage("Return Time cannot be earlier than Checkout Time.");
			inSchedTag.setAttribute("inSched", '');
			return;
		}
		
		var device = new GlideRecord('x_casus_laptop_devices_table');
		device.get(this.getParameter('sysparm_device'));
		
		var accessUtils = new AccessUtils();
		var isManager = accessUtils.isManager();
		
		var duration = new GlideDateTime(GlideDateTime.subtract(checkoutTime, returnTime));
		var maxTime = new GlideDateTime(device.device_type.max_time);
		var isMaxOrLess = duration.compareTo(maxTime) !== 1;
		
		if(isManager || isMaxOrLess){
			checkoutTime.add(-checkoutTime.getTZOffset());
			returnTime.add(-returnTime.getTZOffset());
			
			var newReturn = this._isInSchedule(device.device_type.depot.schedule, checkoutTime, returnTime, isManager).getDisplayValue();
			
			inSchedTag.setAttribute("inSched", newReturn);
		}else{
			gs.addErrorMessage("Return Time cannot be longer than the maximum duration.");
			inSchedTag.setAttribute("inSched", '');
		}
	},
	
	//Verifies the Customer's student and hold status as well as the Technician's manager status
	checkStudent: function(){
		var student = new GlideRecord('sys_user');
		student.get(this.getParameter('sysparm_student'));
		
		//Customer's student status
		var studentTag = this.newItem("studentTag");
		studentTag.setAttribute("isStudent", student.u_student);
		
		//Customer's faculty status
		var facultyTag = this.newItem("facultyTag");
		facultyTag.setAttribute("isFaculty", student.u_faculty);
		
		//Customer's staff status
		var staffTag = this.newItem("staffTag");
		staffTag.setAttribute("isStaff", student.u_staff);
		
		//Technician's manager status
		var accessUtils = new AccessUtils();
		var managerTag = this.newItem("managerTag");
		managerTag.setAttribute("isManager", accessUtils.isManager());
		
		//Customer's hold status
		var returnUtils = new ReturnUtils();
		var hasHold = returnUtils.customerHasHold(student.sys_id);
		
		var holdTag = this.newItem("holdTag");
		holdTag.setAttribute("hasHold", hasHold);
	},
	
	//Returns current time
	getNowDateTime: function(){
		var nowTag = this.newItem("nowTag");
		nowTag.setAttribute("now", (new GlideDateTime()));
	},
	
	convertDateTo12HourFormat: function(isoDateStr){
		return isoDateStr.replace(/([^\s]+\s)(\d{2})(.+)/, function(x, date, h, ms) {
			h = parseInt(h, 10);
			var ampm = h > 11 ? 'PM' : 'AM';
			if (h > 12) h = h - 12;
			if (10 > h) h = '0' + h;
			return date + h + ms + ' ' + ampm;
		});
	},
	
	convertClientDateTimeToServerFormat: function(dateTimeString){
		var user = new GlideRecord('sys_user');
		user.get(gs.getUser().getID());
		
		var userDateTimeFormat = "yyyy-MM-dd HH:mm:ss"; //CHANGE THIS IF SYSTEM DATE FORMAT CHANGES
		if(user.date_format){
			userDateTimeFormat = user.date_format + " HH:mm:ss";
		}
		
		var dateTime = new GlideDateTime();
		dateTime.setValueUTC(dateTimeString, userDateTimeFormat);
		return dateTime;
	},
	
	type: 'CheckoutFormUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>hedge</sys_created_by>
        <sys_created_on>2017-03-22 21:08:10</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>59b670236fa9b600ad6cd4a21c3ee4d1</sys_id>
        <sys_mod_count>266</sys_mod_count>
        <sys_name>CheckoutFormUtils</sys_name>
        <sys_package display_value="Laptop Checkout" source="x_casus_laptop">ba205f426f7a2a00ad6cd4a21c3ee477</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Laptop Checkout">ba205f426f7a2a00ad6cd4a21c3ee477</sys_scope>
        <sys_update_name>sys_script_include_59b670236fa9b600ad6cd4a21c3ee4d1</sys_update_name>
        <sys_updated_by>hedge</sys_updated_by>
        <sys_updated_on>2018-03-21 23:12:14</sys_updated_on>
    </sys_script_include>
</record_update>
